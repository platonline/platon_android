apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

version = libraryVersion
def bintrayProperties = loadProperties(bintrayPropertiesFile)
def bintrayAuth = getAuthProperties()
afterEvaluate {
    bintray {
        user = bintrayAuth['bintrayUser']
        key = bintrayAuth['bintrayApiKey']

        configurations = ['archives']
        pkg {
            repo = bintrayProperties['pkgRepo']
            name = bintrayProperties['artifactName']
            userOrg = bintrayProperties['pkgUserOrg']

            desc = bintrayProperties['description']
            websiteUrl = bintrayProperties['siteUrl']
            vcsUrl = bintrayProperties['gitUrl']
            publish = true
            publicDownloadNumbers = true
            version {
                desc = bintrayProperties['description']
            }
        }
    }
}

bintrayUpload.doLast{
    println "Remove unwanted artifacts from bintray"
    android.libraryVariants.all { variant ->
        def fileName = "${project.name}-$libraryVersion-${variant.name}.aar"
        def filePath = "com/platon/${project.name}/$libraryVersion/$fileName"

        println "removing: $filePath"
        def cleanupFileScript = "${project.rootDir}/cleanup_bintray_repo.sh"
        exec { commandLine "chmod","+", cleanupFileScript }
        exec {
            commandLine cleanupFileScript,
                    bintrayProperties['pkgUserOrg'], bintrayProperties['pkgRepo'],
                    filePath,
                    "${bintrayAuth['bintrayUser']}:${bintrayAuth['bintrayApiKey']}"
        }
    }
}

group = bintrayProperties['groupId']

install {
    repositories.mavenInstaller {
        filter { artifact, file -> artifact.attributes.classifier == null }
        pom {
            project {
                packaging 'aar'
                groupId bintrayProperties['groupId']
                artifactId bintrayProperties['artifactName']
                name bintrayProperties['artifactName']
                description bintrayProperties['description']
                url bintrayProperties['siteUrl']
                scm {
                    connection bintrayProperties['gitUrl']
                    developerConnection bintrayProperties['gitUrl']
                    url bintrayProperties['siteUrl']
                }
            }
        }
    }
}

static def getAuthProperties(){
    def authFileName="bintrayPlatonAuth"
    def authFileLocation="$System.env.HOME/android"
    def authPropFilePath = "$authFileLocation/$authFileName"
    def authPropFile = new File(authPropFilePath)
    if(!authPropFile.exists()){
        throw new RuntimeException(
                "Cannot publish to bintray: doesn't exist $authPropFilePath \n" +
                        "\tCreate file '$authFileName' at '$authFileLocation' and add:\n" +
                        "\t\t'bintrayUser=<YOUR_BINTRAY_NICKNAME>'\n" +
                        "\t\t'bintrayApiKey=<YOUR_BINTRAY_API_KEY>'"
        )
    }
    def bintrayAuth = new Properties()
    bintrayAuth.load(new FileInputStream(authPropFile))
    return bintrayAuth
}

static def loadProperties(filePath){
    def propFile = new File(filePath)
    if(!propFile.exists()){
        System.err.println("$filePath doesn't exist")
    }
    def properties = new Properties()
    properties.load(new FileInputStream(propFile))
    return properties
}