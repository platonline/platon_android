apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

version = libraryVersion
def artifactoryProperties = loadProperties(artifactoryPropertiesFile)
def artifactoryAuth = getAuthProperties()

afterEvaluate {
    publishing {
        publications {
            aar(MavenPublication) {
                groupId = artifactoryProperties['groupId']
                artifactId = artifactoryProperties['artifactName']
                version = libraryVersion

                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")

                pom.withXml {
                    final dependenciesNode = asNode().appendNode('dependencies')

                    ext.addDependency = { Dependency dep, String scope ->
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                            return // invalid dependencies should be ignored

                        final dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('artifactId', dep.name)

                        if (dep.version == 'unspecified') {
                            dependencyNode.appendNode('groupId', project.ext.pomGroupID)
                            dependencyNode.appendNode('version', project.ext.pomVersion)
                            System.println("${project.ext.pomGroupID} ${dep.name} ${project.ext.pomVersion}")
                        } else {
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('version', dep.version)
                            System.println("${dep.group} ${dep.name} ${dep.version}")
                        }

                        dependencyNode.appendNode('scope', scope)
                        // Some dependencies may have types, such as aar, that should be mentioned in the POM file
                        def artifactsList = dep.properties['artifacts']
                        if (artifactsList != null && artifactsList.size() > 0) {
                            final artifact = artifactsList[0]
                            dependencyNode.appendNode('type', artifact.getType())
                        }

                        if (!dep.transitive) {
                            // In case of non transitive dependency, all its dependencies should be force excluded from them POM file
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            exclusionNode.appendNode('groupId', '*')
                            exclusionNode.appendNode('artifactId', '*')
                        } else if (!dep.properties.excludeRules.empty) {
                            // For transitive with exclusions, all exclude rules should be added to the POM file
                            final exclusions = dependencyNode.appendNode('exclusions')
                            dep.properties.excludeRules.each { ExcludeRule rule ->
                                final exclusionNode = exclusions.appendNode('exclusion')
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }

                    configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                    configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
                }
            }
        }
    }
}

artifactory {
    contextUrl = 'https://platon.jfrog.io/artifactory'
    publish {
        repository {
            repoKey = "platon"
            username = artifactoryAuth['artifactoryEmail']
            password = artifactoryAuth['artifactoryPassword']
        }
        defaults {
            publishArtifacts = true
            publications('aar')
        }
    }
}

static def getAuthProperties() {
    def authFileName="artifactoryPlatonAuth"
    def authFileLocation="$System.env.HOME/android"
    def authPropFilePath = "$authFileLocation/$authFileName"
    def authPropFile = new File(authPropFilePath)
    if(!authPropFile.exists()){
        throw new RuntimeException(
                "Cannot publish to artifactory: doesn't exist $authPropFilePath \n" +
                        "\tCreate file '$authFileName' at '$authFileLocation' and add:\n" +
                        "\t\t'artifactoryEmail=<YOUR_ARTIFACTORY_EMAIL>'\n" +
                        "\t\t'artifactoryPassword=<YOUR_ARTIFACTORY_PASSWORD>'"
        )
    }
    def bintrayAuth = new Properties()
    bintrayAuth.load(new FileInputStream(authPropFile))
    return bintrayAuth
}

static def loadProperties(filePath) {
    def propFile = new File(filePath)
    if (!propFile.exists()) {
        System.err.println("$filePath doesn't exist")
    }
    def properties = new Properties()
    properties.load(new FileInputStream(propFile))
    return properties
}